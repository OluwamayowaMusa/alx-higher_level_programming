The ``0-add_integer`` module
==================================
Using the ``add_integer`` function
==================================

This is a test file in reStructedText format. First import
``add_integer`` from the ``0-add_integer`` module

>>> add_integer = __import__('0-add_integer').add_integer

Now use it:

Numbers (int):
=============
``add_integer`` returns the addition of two integers passed
::
	>>> add_integer(2, 4)
	6
	>>> add_integer(3, 90)
	93
	>>> add_integer(7, 6)
	13
	>>> add_integer(1)
	99

Numbers (float):
===============
``add_integer`` returns the addition of floats first casted into integers
::
	>>> add_integer(1.0, 8.0)
	9
	>>> add_integer(7.8, 6.5)
	13

Strings:
=======
``add_integer`` raises a TypeError with message either a or b must be integers
::
	>>> add_integer(1.0, "8.9")
	Traceback (most recent call last):
		...
	TypeError: b must be an integer

	>>> add_integer("temp", 98)
	Traceback (most recent call last):
		...
	TypeError: a must be an integer

	>>> add_integer("1.09", "67")
	Traceback (most recent call last):
		...
	TypeError: a must be an integer

Inifinty:
=========
``add_integer`` raises OverflowError 
::
	>>> add_integer(float('inf'), 1)
	Traceback (most recent call last):
		...
	OverflowError: cannot convert float infinity to integer

	>>> add_integer(1, float('inf'))
	Traceback (most recent call last):
		...
	OverflowError: cannot convert float infinity to integer

	>>> add_integer(float('-inf'), 1)
	Traceback (most recent call last):
		...
	OverflowError: cannot convert float infinity to integer

	>>> add_integer(1, float('-inf'))
	Traceback (most recent call last):
		...
	OverflowError: cannot convert float infinity to integer

NaN:
====
``add_integer`` raises ValueError
::
	>>> add_integer(float('NaN'), 1)
	Traceback (most recent call last):
		...
	ValueError: cannot convert float NaN to integer

No args:
=======
::
	>>> add_integer()
	Traceback (most recent call last):
		...
	TypeError: add_integer() missing 1 required positional argument: 'a'
