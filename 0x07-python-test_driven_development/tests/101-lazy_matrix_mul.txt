The ``101-lazy_matrix_mul`` module
==================================
Using the ``lazy_matrix_mul`` function
==================================

First, you have to import the ``matrix_mul`` function
from the ``100-matrix_mul`` module
::
B
	>>> lazy_matrix_mul = __import__("101-lazy_matrix_mul").lazy_matrix_mul

Now Use it:

The ``lazy_matrix_mul`` function accepts two inputs which must be a list of
lists of integers or floats and returns the multiplication of both matrices.
Any other inputs will raise a TypeError(if any element of the list of lists isn't
integer or float a ValueError will be raised. ``lazy_matrix_mul`` also checks if both
matrices can be multiplied else a ValueError is raised.
::
	>>> lazy_matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, 4]])
	array([[ 7, 10],
	       [15, 22]])

	>>> lazy_matrix_mul([[1, 2]], [[3, 4], [5, 6]])
	array([[13, 16]])

	>>> lazy_matrix_mul("list", 1)
	Traceback (most recent call last):
		...
	ValueError: Scalar operands are not allowed, use '*' instead

	>>> lazy_matrix_mul([], 9)
	Traceback (most recent call last):
		...
	ValueError: Scalar operands are not allowed, use '*' instead

	>>> lazy_matrix_mul([1,2], [2, 3])
	Traceback (most recent call last):
		...
	TypeError: object of type 'int' has no len()

	>>> lazy_matrix_mul([[1,2]], [2, 3])
	Traceback (most recent call last):
		...
	TypeError: object of type 'int' has no len()

	>>> lazy_matrix_mul([[]], [[]])
	Traceback (most recent call last):
		...
	ValueError: shapes (1,0) and (1,0) not aligned: 0 (dim 1) != 0 (dim 0)

	>>> lazy_matrix_mul([[1, 2], ["jek"]], [[1, 2]])
	Traceback (most recent call last):
		...
	ValueError: setting an array element with a sequence.

	>>> lazy_matrix_mul([[1, 2], [1]], [[1]])
	Traceback (most recent call last):
		...
	ValueError: setting an array element with a sequence.

	>>> lazy_matrix_mul([[1, 2, 3], [3, 4, 6]], [[1, 2, 3]])
	Traceback (most recent call last):
		...
	ValueError: shapes (3,2) and (3,3) not aligned: 2 (dim 1) != 3 (dim 2)
